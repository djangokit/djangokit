---
# App

- name: <LOCAL> Remove app build directory & archive
  tags:
    - prepare-app
    - prepare-app-clean
    - deploy-app
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ app_build_dir }}"
    - "{{ app_build_archive }}"

- name: <LOCAL> Create app build directory for version
  tags:
    - prepare-app
    - deploy-app
  file:
    path: "{{ app_build_dir }}"
    state: directory

- name: <LOCAL> Copy public dotenv file to build directory
  tags:
    - prepare-app
    - prepare-copy-files
    - deploy-app
  template:
    src: "{{ local_public_dotenv_file }}"
    dest: "{{ app_build_dir }}"

- name: <LOCAL> Copy env-specific dotenv file to build directory
  tags:
    - prepare-app
    - prepare-copy-files
    - deploy-app
  template:
    src: "{{ local_dotenv_file }}"
    dest: "{{ app_build_dir }}"

- name: <LOCAL> Copy WSGI module to build directory
  tags:
    - prepare-app
    - prepare-copy-files
    - deploy-app
  template:
    src: "wsgi.py.j2"
    dest: "{{ app_build_dir }}/wsgi.py"

- name: <LOCAL> Remove existing source distributions
  tags:
    - prepare-app
    - deploy-app
    - build-distributions
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ root }}/dist"
    - "{{ core_root }}/dist"
    - "{{ cli_root }}/dist"

- name: <LOCAL> Build source distributions
  tags:
    - prepare-app
    - deploy-app
    - build-distributions
  command: poetry build --format wheel
  args:
    chdir: "{{ item }}"
  with_items:
    - "{{ root }}"
    - "{{ core_root }}"
    - "{{ cli_root }}"

- name: <LOCAL> Copy source distributions to build directory
  tags:
    - prepare-app
    - deploy-app
    - build-distributions
  copy:
    src: "{{ item }}"
    dest: "{{ app_build_dir }}/dist/"
  with_fileglob:
    - "{{ root }}/dist/*"
    - "{{ core_root }}/dist/*"
    - "{{ cli_root }}/dist/*"

- name: <LOCAL> Create build archive
  tags:
    - prepare-app
    - deploy-app
    - create-app-archive
  archive:
    path: "{{ app_build_dir }}"
    dest: "{{ app_build_archive }}"

# SSR

- name: <LOCAL> Remove SSR build directory & archive
  tags:
    - prepare-ssr
    - prepare-ssr-clean
    - deploy-ssr
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ ssr_build_dir }}"
    - "{{ ssr_build_archive }}"

- name: <LOCAL> Create SSR build directory for version
  tags:
    - prepare-ssr
    - deploy-ssr
  file:
    path: "{{ ssr_build_dir }}"
    state: directory

- name: <LOCAL> Copy package.json to SSR build directory
  tags:
    - prepare-ssr
    - deploy-ssr
  copy:
    src: "package.json"
    dest: "{{ ssr_build_dir }}"

- name: <LOCAL> Copy source files to SSR build directory
  tags:
    - prepare-ssr
    - deploy-ssr
  command: >
    rsync -rltvzm
    --exclude __pycache__/
    --exclude static/build/
    --include */
    --include *.ts
    --include *.tsx
    --exclude *
    "{{ package_dir }}/"
    "{{ ssr_build_dir }}/"

- name: <LOCAL> Create SSR build directory (used on server)
  tags:
    - prepare-ssr
    - deploy-ssr
  file:
    path: "{{ ssr_build_dir }}/static/build"
    state: directory

- name: <LOCAL> Create SSR archive
  tags:
    - prepare-ssr
    - deploy-ssr
    - create-ssr-archive
  archive:
    path: "{{ ssr_build_dir }}"
    dest: "{{ ssr_build_archive }}"

# Static files

- name: <LOCAL> Remove client & static build directories
  tags:
    - prepare-static
    - prepare-static-clean
    - deploy-static
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ client_build_dir }}"
    - "{{ static_build_dir }}"
    - "{{ static_build_archive }}"

- name: <LOCAL> Build client bundle
  tags:
    - prepare-static
    - prepare-static-build
    - deploy-static
  environment:
    - DJANGOKIT_STATIC_BUILD_DIR: "{{ client_build_dir }}"
  command: >
    djangokit
    --env {{ env }}
    build-client
    --minify 
  args:
    creates: "{{ client_build_dir }}/client.bundle.js"

- name: <LOCAL> Collect Django static files
  tags:
    - prepare-static
    - prepare-static-build
    - deploy-static
  environment:
    - DJANGO_STATIC_ROOT: "{{ static_build_dir }}"
  command: djangokit manage collectstatic

- name: <LOCAL> Create static archive
  tags:
    - prepare-static
    - deploy-static
    - create-static-archive
  archive:
    path: "{{ static_build_dir }}"
    dest: "{{ static_build_archive }}"
